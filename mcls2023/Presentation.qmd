---
title: "Integrating perceptual and cognitive processes in mental arithmetic"
author: Josh Medrano (presenting) & Richard Prather, Ph.D.
institute: University of Maryland, College Park
format: 
  revealjs:
    theme: [default, custom.scss]
    progress: false
    slide-number: true
editor: visual
title-slide-attributes: 
  data-background-image: "Presentation_files/McKeldinMall_09122007_12.jpg"
  data-background-opacity: "0.25"
---

## Whole number arithmetic

-   Domain-specific: Recognizing numbers and operations and knowledge about the magnitude of numbers
-   Domain-general: Working memory - maintaining and manipulating information
    -   7% to 19% reduction in response time while computing arithmetic under a working memory load (Chen & Bailey, 2020)
    -   Visuospatial working memory and arithmetic tasks recruit similar neural regions (Matejko & Ansari, 2022)

::: notes
Today, I'm going to talk about whole number arithmetic, in particular. What does it take to do arithmetic computation? There is domain-specific knowledge, where we have to recognize numbers and operations and knowledge about the magnitude of numbers.

And there is working memory, which is the ability to maintain and mentally manipulate information. We know that working memory is involved because when individuals do computations and do a working memory task at the same time, computation interferes with memory, and so we can conclude that working memory is involved in working memory. Indeed, participants are slower by 7 to 19% during arithmetic under any working memory load. In addition, arithmetic share the similar neural regions as working memory, particularly visuospatial working memory.
:::

## Role of perceptual cues: The spacing effect

-   Spacing: the proximity between operands and operators
-   When spacing is [**consistent**]{.underline} with the order of operations (with narrower spacing associated with earlier procedures), individuals make [**fewer errors**]{.underline} and [**respond more quickly**]{.underline}
    -   Consistent:     2      +      3x4
    -   Inconsistent:   2+3      x      4
    -   Neutral: 2+3x4

::: notes
There has been this recent research on perceptual processes, specifically spacing, which refers to the proximity between operands and operators. Spacing can facilitate or hinder arithmetic performance, such that... \[read slide\]. For example, read \[slide\]
:::

## The spacing effect persists

-   across contexts (lab, school, homework environment) and ages (Closser et al., 2022)
-   after delay between viewing expression and evaluating the expression (Rivera and Garrigan, 2016)
-   depending on inhibitory control (Closser et al., 2023)

::: fragment
Why does the effect persist?
:::

::: fragment
Does spacing interact with working memory?
:::

::: notes
The spacing effect persists regardless of whether the computation is done in the lab, in school, or in a homework environment, and regardless of participant age (Closser et al., 2022).

It also persists when there is a delay between viewing expression and evaluating the expression.

It also depends on the inhibitory control. Those who have higher inhibitory control are less likely to be susceptible to spacing effect

While much has been theorized about why visual and perceptual features affect problem-solving, there is a lack of empirical research regarding the mechanisms underlying this learning process.

In this presentation we seek to answer why does this effect persist. Why do individuals perform poorly for expressions with inconsistent spacing? We think that this is working memory

and we are interested in whether there is an interaction on spacing and working memory.
:::

# Method

## Sample & Procedure {.smaller}

-   *N* = 114 adults (convenience sampling)

::: r-stack
::: fragment
![](Presentation_files/ProcedureFigure/ProcedureFigure.002.jpeg)
:::

::: fragment
![](Presentation_files/ProcedureFigure/ProcedureFigure.003.jpeg)
:::
:::

::: notes
Method. We have not actually finished this project. But at the end of data collection, we should have about 114 adults who have completed hte following in Gorilla: - a demographic background survey - a math anxiety survey - two baseline working memory span tasks - and three dual tasks
:::

## Dual task methodology

-   Primary Task: Arithmetic
    -   Each expression had 3 operands with either +x, x+, ++, or xx operations
-   Secondary Task: Working Memory
    -   2 Types: dots (visuospatial) and letters (phonological)
    -   2 Load Difficulties: low and high

::: notes
Dual tasks are often used to investigate whether two tasks share the same process.
:::

# Does spacing interact with working memory?

Results from the spacing-varying condition (condition 2)

::: notes
So, results. Again, we are interested in this particular question, does spacing interact with working memory. For this question, we are looking at an analysis of the second condition.
:::

## Analytical Plan

::: nonincremental
-   Trial Sequence:
    -   WM Stimuli -\> Arith Exp -\> Arith Eval -\> WM Recall
-   ANOVAs
-   DVs:
    -   Accuracy and RTs for Arith Evaluation
    -   Accuracy and RTs for WM Recall
-   IVs:
    -   `spacing` x `type` x `load`
:::

::: notes
Just to remind you, each trial consisted of arithmetic evaluation and working memory recall. So we will be looking at the accuracy and response times for those, with Spacing, Type, and Load as independent variables. And we will conduct analyses of variance.
:::

## Descriptives

-   34 participants (30%), aged 19.4 to 68.1 years (*M*=31.6, *SD*=12.8)

-   Highly educated with moderate math anxiety (*M*=2.8, *SD*=)

-   Median number of dots and letters in low and high load trials:

    -   Low load: 2
    -   High load: 6

## Arithmetic accuracy by spacing {style="font-size:24px"}

::: nonincremental
-   Effect of `spacing`, *F*(2,64)=7.68, *p*=.001, $\eta^{2}_{p}$=0.19

```{r fig.height=5}
#| echo: false

suppressMessages(library(tidyverse))

dat.2 <- read.csv("/Users/joshmedrano/Library/CloudStorage/Box-Box/Dissertation/dual_ArithWSpacing.csv", header=TRUE)

dat.2 <- dat.2 %>%
  filter(display=="expression") %>%
  group_by(id1,load,wmLoad,spCond) %>%
  mutate(wmLoad=ifelse(wmLoad=="low_p"|wmLoad=="high_p","letters","dots")) %>%
  summarize(log_rt=mean(log(rt), na.rm=TRUE),
            acc=mean(acc),
            rt=mean(rt, na.rm=TRUE))


dat.2.4.sum <- dat.2%>%
  group_by(spCond) %>%
  summarise(
    mean_acc = mean(acc,na.rm=TRUE),
    mean_rt=mean(rt,na.rm=TRUE),
    mean_log_rt=mean(log(rt),na.rm=TRUE),
    sd_acc = sd(acc,na.rm=TRUE),
    sd_rt = sd(rt,na.rm=TRUE),
    sd_log_rt = sd(log(rt),na.rm=TRUE),
    n = n(),
    se_acc = sd_acc / sqrt(n),
    se_rt = sd_rt / sqrt(n),
    se_log_rt = sd_log_rt/sqrt(n)
  )

dat.2.4.sum$spCond <- factor(dat.2.4.sum$spCond)
levels(dat.2.4.sum$spCond) <- c("consistent\n2   +   3x4", "inconsistent\n2+3   x   4", "neutral\n2+3x4")

a <- ggplot(dat.2.4.sum, aes(x=spCond, y=mean_acc)) + 
  geom_bar(stat="identity", position=position_dodge()) +
  ylab("Accuracy") + xlab("Spacing") +
  geom_errorbar(aes(ymin = mean_acc - se_acc, ymax = mean_acc + se_acc), width = .1, position=position_dodge(.9))
a+
  theme_gray(base_size = 20) +
  theme(axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        legend.title=element_blank())

```
:::

::: notes
Here comes the graphs. First, as expected, we found an effect of spacing. With accuracy on arithmetic performance as our dependent variable, participants did equally well on expressions with consistent or neutral spacing and least well on expressions with inconsistent spacing.
:::

## Arithmetic accuracy by spacing and load {style="font-size:24px"}

::: nonincremental
-   Main effect of `load`, *F*(1,32)=5.83, *p*=0.02, $\eta^{2}_{p}$=0.15, with higher accuracy when WM load is high (87.9%) vs. low (85.7%)

```{r fig.height=5}
#| echo: false

dat.2.4.sum2 <- dat.2%>%
  group_by(spCond,load) %>%
  summarise(
    mean_acc = mean(acc,na.rm=TRUE),
    mean_rt=mean(rt,na.rm=TRUE),
    mean_log_rt=mean(log(rt),na.rm=TRUE),
    sd_acc = sd(acc,na.rm=TRUE),
    sd_rt = sd(rt,na.rm=TRUE),
    sd_log_rt = sd(log(rt),na.rm=TRUE),
    n = n(),
    se_acc = sd_acc / sqrt(n),
    se_rt = sd_rt / sqrt(n),
    se_log_rt = sd_log_rt/sqrt(n)
  )

dat.2.4.sum2$spCond <- factor(dat.2.4.sum2$spCond)
levels(dat.2.4.sum2$spCond) <- c("consistent\n2   +   3x4", "inconsistent\n2+3   x   4", "neutral \n 2+3x4")

b <- ggplot(dat.2.4.sum2, aes(x=spCond, y=mean_acc, fill=load, group=load)) + 
  geom_bar(stat="identity", position=position_dodge()) +
  ylab("Accuracy") + xlab("Spacing") +
   geom_errorbar(aes(ymin = mean_acc - se_acc, ymax = mean_acc + se_acc), width = .2, position=position_dodge(.9))
b+
  theme_gray(base_size = 20) +
  theme(axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        legend.title=element_blank())
 
```
:::

::: notes
-   make sure to explain colors Second, we found an effect of load, where participants did better on expressions under high load trials than low load trials. There is no interaction between spacing and load but there are differences in load by spacing condition. As you can see there is a greater difference in the inconsistent spacing condition.

That participants did better under high load than low load is an unusual finding because we usually see the opposite, but there two explanations for this.

One explanation is order effect. Participants saw all the low-load trials before the high-load trials, and they could be less accurate in the low-load trials because they were adjusting to the task. However, this does not explain the slight differences between spacing conditions, which were randomized.

Another explanation is that individuals were more likely to track information under low load. By this, I mean that in the low load, participants may have been maintaining the dot or letters while evaluating the expression. And when there was inconsistent spacing, it was particularly harder for them to track and manipulate the spacing.

That is, though there is no interaction, we see differences between loads by spacing, which might mean that spacing is encoded into working memory.
:::

## WM recall accuracy {style="font-size:24px"}

::: nonincremental
-   Only a main effect of `load`, *F*(1,32) = 21.76, *p*\<.001, $\eta^{2}_{p}$=0.40 with higher accuracy for low (*M*=85.1%) than high (*M*=77.6%) load trials
-   Smaller difference between high/low loads for dots

```{r fig.height=5}
#| echo: false
dat.2.1 <- read.csv("/Users/joshmedrano/Library/CloudStorage/Box-Box/Dissertation/dual_ArithWSpacing.csv", header=TRUE)

dat.2.1 <- dat.2.1 %>%
  filter(display!="expression") %>%
  mutate(display=ifelse(display=="p_test","letters","dots"))

dat.2.1.sum <- dat.2.1 %>%
  group_by(spacing, load, display) %>%
  summarise(
    mean_acc = mean(acc,na.rm=TRUE),
    mean_rt=mean(rt,na.rm=TRUE),
    mean_log_rt=mean(log(rt),na.rm=TRUE),
    sd_acc = sd(acc,na.rm=TRUE),
    sd_rt = sd(rt,na.rm=TRUE),
    sd_log_rt = sd(log(rt),na.rm=TRUE),
    n = n(),
    se_acc = sd_acc / sqrt(n),
    se_rt = sd_rt / sqrt(n),
    se_log_rt = sd_log_rt/sqrt(n)
  )

dat.2.1.sum$spacing <- factor(dat.2.1.sum$spacing)
levels(dat.2.1.sum$spacing) <- c("consistent", "inconsistent", "neutral")

a <- dat.2.1.sum %>%
  ggplot(aes(x=spacing, y=mean_acc, group=load, colour=load)) +
  geom_line(linewidth=1) +
  geom_point(size=2) +
  facet_wrap (~display) + ylim(0,1) + ylab("Accuracy") +
  geom_errorbar(aes(ymin = mean_acc - se_acc, ymax = mean_acc + se_acc), width = .1)
a +
  theme_gray(base_size = 20) +
  theme(axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        legend.title=element_blank())

```
:::

::: notes
No we are going to look at working memory accuracy. We did not see differences in accuracy between spacing types in either graph. However, we see that there are differences between low and high load. As expected, participants did better trials with low load.

Now, there is no significant interactions, but we see larger difference when recalling letters vs. dots.
:::

## WM recall RTs (log-transformed) {style="font-size:24px"}

::: nonincremental
-   Main effect of `load`: *F*(1,32) = 15.56, *p*\<.001, $\eta^{2}_{p}$=0.33, with lower RTs for low load trials
-   Main effect of `type`: *F*(1,32) = 6.02, *p*=0.02, $\eta^{2}_{p}$=0.16, with lower RTs for dot recall
-   Smaller difference between high/low loads for dots

```{r fig.height=5}

b <- dat.2.1.sum %>%
  ggplot(aes(x=spacing, y=mean_log_rt, group=load, colour=load)) +
  geom_line(linewidth=1) +
  geom_point(size=2) +
  facet_wrap (~display) + ylab("Response Time \n (log-transformed)") +
  geom_errorbar(aes(ymin = mean_log_rt - se_log_rt, ymax = mean_log_rt + se_log_rt), width = .1)
b +
  theme_gray(base_size = 20) +
  theme(axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        legend.title=element_blank())


```
:::

::: notes
Here are graphs of response times. There was a main effect of load, with participants being faster for low load trials, and there was a main effect of type, with participants being faster when recalling dots.

Again, we do not see differences between spacing conditions in either graph. We also do not have a significant interaction effect. However, we see that there are differences between low and high load, with a larger difference when recalling letters as opposed to dots.

Differences between loads and types during working memory recall may indicate that visuospatial WM is more involved in multi-operand arithmetic or spacing facilitates VSWM, which we can test by analyzing conditions 1 and 2.
:::

## Summary

::: incremental
-   Spacing effect persisted in the task
-   Higher arithmetic accuracy during high load trials
-   Better recall accuracy and RT during low load trials
-   Better recall RT (faster) for dots
-   No significant interactions
    -   Note small sample size (*N* = 34) and high education levels (\~50% had graduate school experience)
:::

## Discussion

::: incremental
-   Some patterns and trends, where there are load differences within spacing conditions or spacing types
-   Implications
    -   Research on relationship between (VS)WM and arithmetic
    -   Perceptual cues can be used to support (VS)WM, or vice versa, during math learning
:::

::: notes
So, does spacing interact with WM? We did not find significant interactions. This might be due to small sample size and highly educated sample.

Regardless, I think this work has implications particularly for the increase of research on numerical cognition and visuospatial working memory. More practically, it could tell us more about how perceptual cues are used during math learning, wherein perceptual cues can be used to support VSWM (or vice versa).

-   Pattern may be due to order effect or spacing being maintained in WM

-   Smaller difference between high/low loads for dots may indicate that there is [greater VSWM involvement during dual task]{.underline} *and/or* that [spacing facilitates VSWM]{.underline}
:::

# Thank you! {background-image="Presentation_files/McKeldinMall_09122007_12.jpg" background-opacity=0.25}

Email: jmed7\@umd.edu

Twitter: josh_medrano10

Website: joshm7.github.io

::: notes
Thank you so much for listening to me and my colleagues talk. I will take any questions right now.

-   What if we do not find interactions between spacing and working memory?

-   It is possible that working memory might not be holding spacing information. There have been findingwhere problem size did not have an effect on working memory or where findings are mixed, but effects may be moderated by math anxiety (e.g., DeCaro et al., 2010).

-   
:::

## Some Statistics {visibility="uncounted"}

-   One in three individuals in the U.S. with a Bachelor's degree lack important numeracy skills (e.g., understanding complex quantitative information, recognizing mathematical patterns and relationships, and solving problems that require multiple steps)
-   Among 16-34-year-old individuals' numeracy in 30 countries, U.S. is ranked 26
-   For every standard deviation increase in numeracy, there is an increase in 9.4% of monthly earnings

## Findings for RQ 1 {visibility="uncounted"}

1.  How does working memory influence multi-operand arithmetic performance?

-   Across all task conditions, there is an effect of load and type (separately) on arithmetic accuracy and RT.

## Expected Findings for RQs 2 & 3 {visibility="uncounted"}

2.  Does spacing influence working memory?
    -   Better arithmetic performance when spacing is consistent or neutral
    -   Better memory for letters/dots when spacing is consistent or neutral
3.  Do parentheses reduce the spacing effect (and effect of spacing on WM)?
    -   Better arithmetic performance overall in the parenthesis dual task condition
